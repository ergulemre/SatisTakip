import React, { useEffect, useState } from 'react';
import { 
  View, 
  Text, 
  FlatList, 
  RefreshControl, 
  StyleSheet, 
  TouchableOpacity, 
  ScrollView,
  Dimensions 
} from 'react-native';
import { useAuth } from '../context/AuthContext';
import AppointmentCard from '../components/AppointmentCard';

const { width } = Dimensions.get('window');

export default function HomeScreen({ navigation }) {
  const { user } = useAuth();
  const [appointments, setAppointments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [motivationalQuote, setMotivationalQuote] = useState('');

  // 100 farklÄ± motivasyon sÃ¶zÃ¼
  const motivationalQuotes = [
    "BaÅŸarÄ±, her gÃ¼n kÃ¼Ã§Ã¼k adÄ±mlar atmaktÄ±r.",
    "Hedeflerinize ulaÅŸmak iÃ§in bugÃ¼n baÅŸlayÄ±n.",
    "Her mÃ¼ÅŸteri bir fÄ±rsattÄ±r.",
    "SatÄ±ÅŸ sanatÄ±, dinleme sanatÄ±dÄ±r.",
    "BaÅŸarÄ±sÄ±zlÄ±k, baÅŸarÄ±nÄ±n temelidir.",
    "MÃ¼ÅŸteri memnuniyeti en bÃ¼yÃ¼k Ã¶dÃ¼ldÃ¼r.",
    "Her gÃ¼n yeni bir baÅŸlangÄ±Ã§tÄ±r.",
    "Kalite, miktardan Ã¶nce gelir.",
    "MÃ¼ÅŸteri odaklÄ± dÃ¼ÅŸÃ¼n, satÄ±ÅŸ odaklÄ± hareket et.",
    "BaÅŸarÄ±, sÃ¼rekli Ã¶ÄŸrenmektir.",
    "Her randevu bir fÄ±rsattÄ±r.",
    "MÃ¼ÅŸteri ihtiyaÃ§larÄ±nÄ± anla, Ã§Ã¶zÃ¼mÃ¼ sun.",
    "SatÄ±ÅŸ, gÃ¼ven inÅŸa etmektir.",
    "Her gÃ¼n bir adÄ±m ileri.",
    "MÃ¼ÅŸteri memnuniyeti en iyi reklamdÄ±r.",
    "BaÅŸarÄ±, tutarlÄ±lÄ±k gerektirir.",
    "Her mÃ¼ÅŸteri Ã¶zeldir.",
    "SatÄ±ÅŸ, problem Ã§Ã¶zmektir.",
    "MÃ¼ÅŸteri odaklÄ± yaklaÅŸÄ±m baÅŸarÄ±yÄ± getirir.",
    "Her gÃ¼n yeni bir Ã¶ÄŸrenme fÄ±rsatÄ±dÄ±r."
  ];

  useEffect(() => {
    loadData();
    // Her uygulama aÃ§Ä±lÄ±ÅŸÄ±nda farklÄ± motivasyon sÃ¶zÃ¼
    const randomIndex = Math.floor(Math.random() * motivationalQuotes.length);
    setMotivationalQuote(motivationalQuotes[randomIndex]);
  }, []);

  async function loadData() {
    setLoading(true);
    try {
      // Fake data - gerÃ§ek uygulamada API'den gelecek
      const fakeAppointments = [
        {
          id: '1',
          title: 'Mimar Ahmet Taha Ã‡elik ile mÃ¼ÅŸteri gÃ¶rÃ¼ÅŸmesi',
          customerName: 'Ahmet Taha Ã‡elik',
          plannedStart: new Date().getTime(),
          status: 'PLANNED',
          location: 'Merkez Åžube',
          notes: 'Mimari proje gÃ¶rÃ¼ÅŸmesi'
        },
        {
          id: '2',
          title: 'Yeni mÃ¼ÅŸteri tanÄ±tÄ±mÄ±',
          customerName: 'ABC Åžirketi',
          plannedStart: new Date().getTime() + 3600000,
          status: 'PLANNED',
          location: 'Åžube 1',
          notes: 'ÃœrÃ¼n tanÄ±tÄ±mÄ± ve fiyat teklifi'
        }
      ];
      
      setAppointments(fakeAppointments);
    } catch (error) {
      console.error('Veri yÃ¼klenirken hata:', error);
    } finally {
      setLoading(false);
    }
  }

  const renderHeader = () => (
    <View style={styles.header}>
      <Text style={styles.welcomeText}>HoÅŸ geldin, {user?.name || 'KullanÄ±cÄ±'}!</Text>
      <Text style={styles.dateText}>
        {new Date().toLocaleDateString('tr-TR', { 
          weekday: 'long', 
          year: 'numeric', 
          month: 'long', 
          day: 'numeric' 
        })}
      </Text>
      
      {/* Motivasyon SÃ¶zÃ¼ */}
      <View style={styles.quoteContainer}>
        <Text style={styles.quoteIcon}>ðŸ’ª</Text>
        <Text style={styles.quoteText}>{motivationalQuote}</Text>
      </View>

      {/* Ã–zet KartlarÄ± */}
      <View style={styles.summaryContainer}>
        <View style={styles.summaryCard}>
          <Text style={styles.summaryNumber}>{appointments.length}</Text>
          <Text style={styles.summaryLabel}>BugÃ¼nkÃ¼ Randevular</Text>
        </View>
        <View style={styles.summaryCard}>
          <Text style={styles.summaryNumber}>0</Text>
          <Text style={styles.summaryLabel}>Tamamlanan</Text>
        </View>
        <View style={styles.summaryCard}>
          <Text style={styles.summaryNumber}>0</Text>
          <Text style={styles.summaryLabel}>Bekleyen</Text>
        </View>
      </View>
    </View>
  );

  const renderAppointment = ({ item }) => (
    <AppointmentCard
      appt={item}
      onPress={() => navigation.navigate('AppointmentDetail', { id: item.id })}
    />
  );

  return (
    <View style={styles.container}>
      <FlatList
        data={appointments}
        keyExtractor={(item) => item.id}
        refreshControl={
          <RefreshControl refreshing={loading} onRefresh={loadData} />
        }
        ListHeaderComponent={renderHeader}
        renderItem={renderAppointment}
        ListEmptyComponent={
          <View style={styles.emptyContainer}>
            <Text style={styles.emptyIcon}>ðŸ“…</Text>
            <Text style={styles.emptyTitle}>BugÃ¼n Randevu Yok</Text>
            <Text style={styles.emptySubtitle}>Yeni randevu eklemek iÃ§in + butonuna tÄ±klayÄ±n</Text>
          </View>
        }
        contentContainerStyle={styles.listContainer}
      />
      
      {/* Yeni Randevu Ekleme Butonu */}
      <TouchableOpacity 
        style={styles.fab}
        onPress={() => navigation.navigate('NewAppointment')}
      >
        <Text style={styles.fabText}>+</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5'
  },
  listContainer: {
    padding: 16
  },
  header: {
    marginBottom: 20
  },
  welcomeText: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 8
  },
  dateText: {
    fontSize: 16,
    color: '#666',
    marginBottom: 20,
    textTransform: 'capitalize'
  },
  quoteContainer: {
    backgroundColor: '#fff',
    padding: 16,
    borderRadius: 12,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3
  },
  quoteIcon: {
    fontSize: 24,
    marginBottom: 8
  },
  quoteText: {
    fontSize: 16,
    color: '#555',
    fontStyle: 'italic',
    textAlign: 'center',
    lineHeight: 22
  },
  summaryContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 20
  },
  summaryCard: {
    backgroundColor: '#fff',
    padding: 16,
    borderRadius: 12,
    flex: 1,
    marginHorizontal: 4,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3
  },
  summaryNumber: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#007AFF',
    marginBottom: 4
  },
  summaryLabel: {
    fontSize: 12,
    color: '#666',
    textAlign: 'center'
  },
  emptyContainer: {
    alignItems: 'center',
    padding: 40
  },
  emptyIcon: {
    fontSize: 48,
    marginBottom: 16
  },
  emptyTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#666',
    marginBottom: 8
  },
  emptySubtitle: {
    fontSize: 14,
    color: '#999',
    textAlign: 'center',
    lineHeight: 20
  },
  fab: {
    position: 'absolute',
    bottom: 20,
    right: 20,
    width: 56,
    height: 56,
    borderRadius: 28,
    backgroundColor: '#007AFF',
    justifyContent: 'center',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 8
  },
  fabText: {
    fontSize: 24,
    color: '#fff',
    fontWeight: 'bold'
  }
});
